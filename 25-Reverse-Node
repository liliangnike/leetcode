/*
Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.
*/
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        vector<int> vec;
        ListNode *root = head;
        
        while(head)
        {
            vec.push_back(head->val);
            head = head->next;
        }
        
        int divide = vec.size()/k;
        
        for (int i = 0; i < divide; i++)
        {
            int start = i * k;
            int end = (i + 1) * k;
            reverse( vec.begin() + start, vec.begin() + end);
        }
        
        
        ListNode *res = root;
        
        for (auto i : vec)
        {
            root->val = i;
            root = root->next;
        }
        
        return res;
    }
};
